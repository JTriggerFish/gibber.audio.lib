{
  "!name": "gibber",
  "!define": {
    "presetName":{ "name":"string" },
    "properties":{ "name":"string" },

    "number__sequencable": {
      SEQMIXIN
    },

    "vec2": {
      "!doc":"A two-item vector.",
      "x": {
        "!type":"number__sequencable",
        "!doc": "default 0. The x member of the vector." 
      },
      "y": {
        "!type":"number__sequencable",  
        "!doc": "default 0. The y member of the vector." 
      }
    },
    "vec3": {
      "!doc":"A three-item vector, often used to store a three-dimensional position, size, or orientation",
      "x": {
        "!type":"number__sequencable",
        "!doc": "default 0. The x member of the vector." 
      },
      "y": {
        "!type":"number__sequencable",  
        "!doc": "default 0. The y member of the vector." 
      },
      "z": {
        "!type":"number__sequencable",  
        "!doc": "default 0. The z member of the vector." 
      }
    },
    "vec4": {
      "!doc":"A four-item vector, often used to store a color with an alpha channel, or a rotation as a quaternion.",
      "x": {
        "!type":"number__sequencable",
        "!doc": "default 0. The x member of the vector." 
      },
      "y": {
        "!type":"number__sequencable",  
        "!doc": "default 0. The y member of the vector." 
      },
      "z": {
        "!type":"number__sequencable",  
        "!doc": "default 0. The z member of the vector." 
      },
      "w": {
        "!type":"number__sequencable",  
        "!doc": "default 0. The w member of the vector." 
      }
    },
    "geometry": {
      "center": {
        "!type":"vec3",
        "!doc": "Controls the center point of the geometry via x,y,and z properties."
      },
      "material": {
        "!type": "material",
        "!doc": "The material properties of the geometry"
      },
      "render": {
        "!type": "fn(shouldAnimate?: bool) -> this"
      }
    },
    "material": {
      "!doc":  "This determines aspects of a geometry such as color and refletance.",
      "mode": { 
        "!type": "string",
        "!doc" : "This determines the lighting model used for the material. Possible options include 'global', 'phong', 'orenn', and 'normal'."
      },
      "ambient": {
        "!doc": "default (.1,.1,.1). This color is applied to every pixel in the geometry equally, regardless of how light strikes the geometry.",
        "!type":"vec3"
      },
      "diffuse": {
        "!doc": "default (0,0,1). This color is applied to every pixel in the geometry equally, regardless of how light strikes the geometry.",
        "!type":"vec3"
      },
      "specular": {
        "!doc": "default (1,1,1). This color is applied to the geometry in spots where light reflects directly into the camera, creating a glare.",
        "!type":"vec3"
      },
      "shininess": {
        "!doc": "default 8. This determines how soft or hard the edges of specular highlights are. More 'shiny' surfaces will have harder edges and are indicated by higher values.",
        "!type": "number"
      },
      "fresnel": {
        "!doc": "default (0,1,2). The Fresnel effect changes the color of a geometry based upon the angle it is viewed at. This vector contains three values: x is bias, or an offset for the effect; y is scale, or a multiplier for the effect; z an coefficient that exponentially controls the effect of reflectance.",
        "!type": "vec3"
      }
    },
    "sphere": {
      "!doc": "A sphere.",
      "!proto":"geometry",
      "radius": {
        "!type":"number__sequencable",
        "!doc" :"The radius of the sphere."
      }
    },
    "box": {
      "!doc": "A three-dimensional box.",
      "!proto":"geometry",
      "size": {
        "!type":"vec3",
        "!doc" :"The size of the box in three dimensions."
      }
    },
    "cone": {
      "!doc": "A cone.",
      "!proto":"geometry",
      "dimensions": {
        "!type":"vec3",
        "!doc" :"The size of the cone in three dimensions."
      }
    },
    "cylinder": {
      "!doc": "A cylinder.",
      "!proto":"geometry",
      "dimensions": {
        "!type":"vec2",
        "!doc" :"The radius and height of the cylinder."
      }
    },
    "capsule": {
      "!doc": "A capsule, which is cylinder with a half sphere on each end (like a pill).",
      "!proto":"geometry",
      "start": {
        "!type":"vec3",
        "!doc" :"The position of the capsule beginning."
      },
      "end": {
        "!type":"vec3",
        "!doc" :"The position of the capsule end."
      },
      "radius": {
        "!type": "number",
        "!doc" : "The radius of the capsule."
      }
    },
    "hexprism": {
      "!doc" : "A six-sided, three-dimensional geometry.",
      "!proto":"geometry",
      "dimensions": {
        "!type":"vec2",
        "!doc" :"The x property represents the radius of the prism, while the y property represents its depth."
      }
    },
    "julia": {
      "!doc": "A three-dimensional rendering of the Julia set of a quaternion function.",
      "!proto":"geometry",
      "c0": {
        "!type":"number",
        "!doc" :"default 0. A coefficient in the Julia set equation."
      }
    },
    "kifs": {
      "!doc": "A kaleidoscopic iterated function system, as described at (and taken from): http://roy.red/folding-the-koch-snowflake-.html",
      "!proto":"geometry",
      "count": {
        "!type":"number",
        "!doc" :"default 8.The number of iterations for the fractal system."
      },
      "fold": {
        "!type":"number",
        "!doc" :"default 0. The amount of folding to perform."
      }
    },
    "mandelbulb": {
      "!proto":"geometry",
      "c0": {
        "!type":"number__sequencable",
        "!doc" :"A coefficient that affects variouus exponents in the Mandulbulb equation. Higher values yield the appearance of greater recursion / complexity."
      }
    },
    "mandelbox": {
      "!proto":"geometry",
      "fold": {
        "!type":"number__sequencable",
        "!doc" :"default .1. A coefficient that controls the amount of spherical folding in the mandelbox." 
      },
      "scale": {
        "!type":"number__sequencable",
        "!doc" :"default 3. A coefficient that controlling scaling in the mandelbox equation." 
      },
      "iterations": {
        "!type":"number__sequencable",
        "!doc" :"default 5. The number of times the mandelbox equation is run per frame. This number greatly influences the complexity of teh final output, but higher values are computationally expensive." 
      }
    },
    "octahedron": {
      "!proto":"geometry",
      "radius": {
        "!type":"number__sequencable",
        "!doc" :"The radius parameter determines the overall size of the octahedron."
      }
    },
    "plane": {
      "!proto":"geometry",
      "normal": {
        "!type":"vec3",
        "!doc" :"default (0,1,0). The direction the plane is facing. By default it faces upward along the y axis."
      },
      "distance": {
        "!type":"vec3",
        "!doc" :"default 1. The distance from the origin of the plane."
      }
    },
    "quad": {
      "!doc": "A two-dimensional, four-sided polygons.",
      "!proto":"geometry",
      "v1": {
        "!type":"vec3",
        "!doc" :"default (-.5,-.5,0). The position of one corner of the quad."
      },
      "v2": {
        "!type":"vec3",
        "!doc" :"default (.5,-.5,0). The position of one corner of the quad."
      },
      "v3": {
        "!type":"vec3",
        "!doc" :"default (.5,.5,0). The position of one corner of the quad."
      },
      "v4": {
        "!type":"vec3",
        "!doc" :"default (-.5,.5,0). The position of one corner of the quad."
      }
    },
    "roundbox": {
      "!doc":  "A rounded three-dimensional box.",
      "!proto":"geometry",
      "size": {
        "!type":"vec3",
        "!doc" :"The size of the box in three dimensions."
      },
      "radius": {
        "!type":"number__sequencable",
        "!doc" :"The radius parameter determines the amount of rounding on the box."
      }
    },
    "torus": {
      "!proto": "geometry",
      "!doc": "A three-dimensional ring.",
      "radii": {
        "!type": "vec2",
        "!doc":  "This vector determines the inner and outer radius of the ring."
      }
    },
    "torus82": {
      "!proto": "geometry",
      "!doc": "A three-dimensional ring that is relatively flat on one axis.",
      "radii": {
        "!type": "vec2",
        "!doc":  "This vector determines the inner and outer radius of the ring."
      }
    },
    "torus88": {
      "!proto": "geometry",
      "!doc": "A three-dimensional, squared ring that is relatively flat on one axis.",
      "radii": {
        "!type": "vec2",
        "!doc":  "This vector determines the inner and outer radius of the ring."
      }
    },
    "triangle": {
      "!doc": "A two-dimensional, three-sided polygons.",
      "!proto":"geometry",
      "v1": {
        "!type":"vec3",
        "!doc" :"default (-.5,-.5,0). The position of one corner of the quad."
      },
      "v2": {
        "!type":"vec3",
        "!doc" :"default (.5,-.5,0). The position of one corner of the quad."
      },
      "v3": {
        "!type":"vec3",
        "!doc" :"default (.5,.5,0). The position of one corner of the quad."
      }
    },
    "triprism": {
      "!proto":"geometry",
      "dimensions": {
        "!type":"vec2",
        "!doc" :"The x property of this vector represents the radius of the prism, while the y property represents its depth."
      }
    }
  },
  "Vec2": {
    "!type": "fn(x?: number, y?: number) -> vec2",
    "!doc": "Constructor for a two-item vector." 
  },
  "Vec3": {
    "!type": "fn(x?: number, y?: number, z?: number) -> vec3",
    "!doc": "Constructor for a three-item vector." 
  },
  "Vec4": {
    "!type": "fn(x?: number, y?: number, z?: number, w?: number) -> vec4",
    "!doc": "Constructor for a four-item vector." 
  },
  "Material": {
    "!type": "fn(lightingModel?: string, ambient?: vec3, diffuse?: vec3, specular?: vec3, shininess?: number, fresnel?: vec3) -> material",
    "!doc": "Constructor for a material; this constructor also has various material presets, as properties.",
    "red": {
      "!type": "material",
      "!doc":  "A matte red material using the default illumination algorithm." 
    },
    "green": {
      "!type": "material",
      "!doc":  "A matte red material using the default illumination algorithm." 
    },
    "yellow": {
      "!type": "material",
      "!doc":  "A matte red material using the default illumination algorithm." 
    },
    "white": {
      "!type": "material",
      "!doc":  "A matte red material using the default illumination algorithm." 
    },
    "black": {
      "!type": "material",
      "!doc":  "A matte red material using the default illumination algorithm." 
    },
    "blue": {
      "!type": "material",
      "!doc":  "A matte red material using the default illumination algorithm." 
    },
    "cyan": {
      "!type": "material",
      "!doc":  "A matte red material using the default illumination algorithm." 
    },
    "magenta": {
      "!type": "material",
      "!doc":  "A matte red material using the default illumination algorithm." 
    },
    "grey": {
      "!type": "material",
      "!doc":  "A matte red material using the default illumination algorithm." 
    },
    "normal": {
      "!type": "material",
      "!doc":  "This material uses the x,y, and z values for the normal of each fragment to determine r,g, and b values." 
    },
    "glue": {
      "!type": "material",
      "!doc":  "This material uses phong lighting to create a flat white color not unlike glue in appearance." 
    },
    "white glow": {
      "!type": "material",
      "!doc":  "A dark material with a strong white glow surrounding edges"
    },
    "default": {
      "!type": "material",
      "!doc":  "If no material is assigned to a geometry, what ever is assigned to Material.default will be used for lighting. You can assign your own material to this property to change the default material."
    }
  },
  "Sphere":{
    "!type": "fn(radius?: number, center?: vec3, material?: material) -> sphere",
    "!doc": "Constructor for a sphere."   
  },
  "Camera":{
    "pos": {
      "!type": "vec3",
      "!doc" : "default (0,0,5). The position of the virtual camera."
    },
    "rotation": {
      "!type": "number",
      "!doc" : "default 0. The camera in Gibber is centered at the origin (0,0,0). The rotation property lets you rotate the camera in a circle around the origin while maintaining focus on the center. This values is measured in radians."
    }
  }
}
